SUFFIXES = .cu .cpp .Plo .Po

noinst_LTLIBRARIES=libcuda.la
check_PROGRAMS=test

libcuda_la_SOURCES=cudafuncs.cpp DeviceMemoryStore.cpp Device.cpp DeviceStream.cpp DeviceCopy.cpp DeviceObjectAllocator.cpp HostObjectAllocator.cpp DeviceConstScalars.cpp DeviceSegmentedSum.cpp DeviceMath.cpp DeviceKernels.cu DeviceFormulas.cpp CUDADenseGraphBFSolver.cpp DeviceDenseGraphBatchSearch.cu DeviceRandom.cu CUDADenseGraphAnnealer.cu DeviceRandomBuffer.cu CUDABipartiteGraphBFSolver.cpp DeviceBipartiteGraphBatchSearch.cpp CUDABipartiteGraphAnnealer.cu

# check
test_SOURCES=test.cpp
test_LDADD=libcuda.la $(top_builddir)/cpu/libcpu.la $(top_builddir)/common/libcommon.la
LIBS=-L@CUDA_LIBDIR@ -lcublas -lcudart -lcurand

include ./$(DEPDIR)/CUDADenseGraphAnnealer.Plo
include ./$(DEPDIR)/CUDABipartiteGraphAnnealer.Plo
include ./$(DEPDIR)/DeviceDenseGraphBatchSearch.Plo
include ./$(DEPDIR)/DeviceBipartiteGraphBatchSearch.Plo
include ./$(DEPDIR)/DeviceRandom.Plo
include ./$(DEPDIR)/DeviceRandomBuffer.Plo
include ./$(DEPDIR)/DeviceKernels.Plo


NVCC=@NVCC@

.cu.o:
	$(NVCC) -c -arch=sm_61 $<  -o $@

.cu.lo:
	mkdir -p .libs
# generate depfile
	$(NVCC) -M -std=c++11 -arch=sm_61 -Xcompiler "$(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)" $<  -o $(DEPDIR)/$*.Tpo
# compile
	$(NVCC) -c -std=c++11 -arch=sm_61 -Xcompiler "$(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)"  $<  -o .libs/$*.o
	@echo "# Generated by libtool :  .lo file for CUDA objects." > $@
	@echo "pic_object='.libs/$*.o'" >> $@
	@echo "non_pic_object=none" >> $@ # FIXME: add static ver.
	sed s/$*.o/$*.lo/ $(DEPDIR)/$*.Tpo > $(DEPDIR)/$*.Plo
	rm -f $(DEPDIR)/$*.Tpo

#$(NVCC) -c -std=c++11 -arch=sm_61 -Xcompiler "$(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)"  $<  -o .libs/$*.o



%.Plo:
	touch $@
%.Po:
	touch $@

# https://stackoverflow.com/questions/23116674/build-cuda-and-c-using-autotools
